var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Core-functions","page":"API Reference","title":"Core functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [smearFEM]\nPages = [\"fem.jl\",\"models.jl\"]","category":"page"},{"location":"api/#smearFEM.basis_function","page":"API Reference","title":"smearFEM.basis_function","text":"basis_function(ξ,η=nothing,ζ=nothing,FunctionClass = \"Q1\")\n\nDefine the basis functions and the gradients for a master element\n\nArguments:\n\nξ::Float64: ξ coordinate of the point where the basis function is evaluated\nη::Float64: η coordinate of the point where the basis function is evaluated\nζ::Float64: ζ coordinate of the point where the basis function is evaluated\nFunctionClass::String: type of basis functions to be considered (Q1:quadratic or Q2:Lagrange)\n\nReturns:\n\nN::Vector{Float64}{,ndof}: basis functions\nDelta_N::Matrix{Float64}{ndof,ndim}: gradient of the basis functions \n\n\n\n\n\n","category":"function"},{"location":"api/#smearFEM.gaussian_quadrature-Tuple{Any, Any}","page":"API Reference","title":"smearFEM.gaussian_quadrature","text":"smearFEM.gaussian_quadrature(a,b,nGaussPoints)\n\nCompute the nodes and weights for the Gaussian quadrature of order 2\n\nArguments:\n\na,b::Integer : the limits of the integration interval\nnGaussPoints::Integer : number of Gauss points to be considered (2 or 3)\n\nReturns:\n\nξ::Vector{Float64}{,nGaussPoints}: nodes.\nw::Vector{Float64}{,nGaussPoints}: weights \n\n\n\n\n\n","category":"method"},{"location":"api/#Meshes","page":"API Reference","title":"Meshes","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [smearFEM]\nPages = [\"Meshes.jl\"]","category":"page"},{"location":"api/#smearFEM.inflate_cylinder-NTuple{5, Any}","page":"API Reference","title":"smearFEM.inflate_cylinder","text":"inflate_cylinder(NodeList, x0, x1, y0, y1)\n\nInflate the sphere to a cylinder of unit radius and height\n\nArguments:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\ny0::Float64 : y-coordinate of the lower left corner of the domain\ny1::Float64 : y-coordinate of the upper right corner of the domain\n\nReturns:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.meshgrid_cube-NTuple{8, Any}","page":"API Reference","title":"smearFEM.meshgrid_cube","text":"meshgrid_cube(x0,x1,y0,y1,z0,z1,ne,ndim;FunctionClass=\"Q1\")\n\nSet up the mesh grid for a 3D cube\n\nArguments:\n\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\ny0::Float64 : y-coordinate of the lower left corner of the domain\ny1::Float64 : y-coordinate of the upper right corner of the domain\nz0::Float64 : z-coordinate of the lower left corner of the domain\nz1::Float64 : z-coordinate of the upper right corner of the domain\nne::Int : number of elements\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\n\nReturns:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\nIEN::Matrix{Int64}{ne^ndim,2^ndim} : array of elements\nID::Matrix{Int64}{nNodes,ndim} : array of node IDs\nIEN_top::Matrix{Int64}{ne^(ndim-1),2^(ndim-1)} : array of elements on the top surface\nIEN_btm::Matrix{Int64}{ne^(ndim-1),2^(ndim-1)} : array of elements on the bottom surface\nBorderNodes::Vector{Int64} : array of nodes on the boundaries\nBottomBorderNodes::Vector{Int64} : array of nodes on the bottom boundary\nTopBorderNodes::Vector{Int64} : array of nodes on the top boundary\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.meshgrid_line-Tuple{Any, Any, Any}","page":"API Reference","title":"smearFEM.meshgrid_line","text":"meshgrid_line(x0,x1,ne,FunctionClass=\"Q1\")\n\nSet up the mesh grid for a 1D line\n\nArguments:\n\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\nne::Int : number of elements\nFunctionClass::String : type of basis function (Q1 or Q2)\n\nReturns:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\nIEN::Matrix{Int64}{ne^ndim,2^ndim} : array of elements\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.meshgrid_ring-NTuple{5, Any}","page":"API Reference","title":"smearFEM.meshgrid_ring","text":"meshgrid_ring(r1,r2, theta1, theta2, ne)\n\nSet up the mesh grid for a 2D annulus ring\n\nArguments:\n\nr1::Float64 : inner radius\nr2::Float64 : outer radius\ntheta1::Float64 : start angle\ntheta2::Float64 : end angle\nne::Int : number of elements\n\nReturns:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\nIEN::Matrix{Int64}{ne^ndim,2^ndim} : connectivity matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.meshgrid_square-NTuple{6, Any}","page":"API Reference","title":"smearFEM.meshgrid_square","text":"meshgrid_square(x0,x1,y0,y1,ne,ndim;FunctionClass=\"Q1\")\n\nSet up the mesh grid for a 2D square\n\nArguments:\n\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\ny0::Float64 : y-coordinate of the lower left corner of the domain\ny1::Float64 : y-coordinate of the upper right corner of the domain\nne::Int : number of elements\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\n\nReturns:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\nIEN::Matrix{Int64}{ne^ndim,2^ndim} : array of elements\nID::Matrix{Int64}{nNodes,ndim} : array of node IDs\nIEN_top::Matrix{Int64}{ne^(ndim-1),2^(ndim-1)} : array of elements on the top surface\nIEN_btm::Matrix{Int64}{ne^(ndim-1),2^(ndim-1)} : array of elements on the bottom surface\nBorderNodes::Vector{Int64} : array of nodes on the boundaries\nBottomBorderNodes::Vector{Int64} : array of nodes on the bottom boundary\nTopBorderNodes::Vector{Int64} : array of nodes on the top boundary\n\n\n\n\n\n","category":"method"},{"location":"api/#Post-processing-functions","page":"API Reference","title":"Post processing functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [smearFEM]\nPages = [\"PostProcess.jl\"]","category":"page"},{"location":"api/#smearFEM.back_project-Tuple{Any, Any}","page":"API Reference","title":"smearFEM.back_project","text":"back_project(NodeList, CameraMatrix)\n\nProject the 3D mesh to 2D image plane\n\nArguments:\n\nNodeList::Matrix{Float64}{3,nbNodes}: 3D mesh grid\nCameraMatrix::Matrix{Float64}{3,3}: Camera matrix\n\nReturns:\n\nNodeList2D::Matrix{Float64}{2,nbNodes}: 2D coordinates of the nodes\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.extract_borders","page":"API Reference","title":"smearFEM.extract_borders","text":"Extract_borders(NodeList, CameraMatrix, BorderNodesList, state, ne = nothing)\n\nProject the 3D mesh to 2D image plane and extract the border nodes (left and right)\n\nArguments:\n\nNodeList::Matrix{Float64}{ndim,nNodes} : coordinates of the nodes\nCameraMatrix::Matrix{Float64}{3,3} : Camera matrix\nBorderNodesList::Vector{Vector{Any}{4,N}:  : List of border nodes\nstate::String : State of the function (init:During the initialization of the mesh or update: when the mesh is updated)\nne::Integer: Number of elements in each direction\n\nReturns:\n\nNodeList::Matrix{Float64}{ndim,nbNodes}: 2D coordinates of the border nodes\nBorderNodes::Vector{Int}: Indexes of the border nodes\n\n\n\n\n\n","category":"function"},{"location":"api/#smearFEM.filter_points-Tuple{Any, Any}","page":"API Reference","title":"smearFEM.filter_points","text":"filter_points(border, centerx)\n\nSelect the nodes on the right side of the centerline and sort them\n\nArguments:\n\nborder::Matrix{Float64}{2,nbNodes}: 2D coordinates of the border nodes\ncenterx::Float64: x-coordinate of the centerline\n\nReturns:\n\nnewBorderxSrt::Vector{Float64}: x coordinates of the sorted border nodes\nnewBorderySrt::Vector{Float64}: y coordinates of the sorted border nodes\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.fit_curve-Tuple{}","page":"API Reference","title":"smearFEM.fit_curve","text":"fit_curve(; border, borderx, bordery)\n\nFit a curve to the border nodes of the 2D mesh\n\nArguments:\n\nborder::Matrix{Float64}{2,nbNodes}: 2D coordinates of the border nodes\nborderx::Vector{Float64}: x coordinates of the border nodes\nbordery::Vector{Float64}: y coordinates of the border nodes\n\nReturns:\n\npi::Vector{Float64}: x coordinates of the fitted curve\nqi::Vector{Float64}: y coordinates of the fitted curve\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.fit_curve_2D-Tuple{Any, Any, Any}","page":"API Reference","title":"smearFEM.fit_curve_2D","text":"fit_curve_2D(x,y, n)\n\nFit a curve to the border nodes of the 2D mesh\n\nArguments:\n\nx::Vector{Float64}: x coordinates\ny::Vector{Float64}: y coordinates\nn::Integer: number of sampled points\n\nReturns:\n\npoints::Vector{Float64}: vector of n sampled points\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.noramlize-Tuple{Any, Any}","page":"API Reference","title":"smearFEM.noramlize","text":"noramlize(q, IEN)\n\nFunction normalize the solution vector for plotting\n\nArguments:\n\nq: solution vector\nIEN::Matrix{Float64}{nElem, nNodes}: IEN array\n\nReturns:\n\nqList: normalized list of solutions \n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.rearrange","page":"API Reference","title":"smearFEM.rearrange","text":"rearrange(q, ne, ndim, IEN, FunctionClass)\n\nRearrange the solution vector from the lagrangian basis functions for to bilinear basis function for plotting and visualization in paraview\n\nArguments:\n\nq::Vector{Float64}: solution vector\nne::Integer: number of elements in each direction\nndim::Integer: number of dimensions\nIEN::Matrix{Float64}{nElem, nNodes}: Connectivity matrix\nFunctionClass::String: type of basis function\n\nReturns:\n\nq_new::Vector{Float64}: rearranged solution vector\nIEN_new::Matrix{Int64}: rearranged connectivity matrix\n\n\n\n\n\n","category":"function"},{"location":"api/#smearFEM.truncate_colormap","page":"API Reference","title":"smearFEM.truncate_colormap","text":"truncate_colormap(minval=0.0, maxval=1.0, n=100)\n\nFunction to truncate a colormap\n\nArguments:\n\nminval::Integer: minimum value of the colormap\nmaxval::Integer: maximum value of the colormap\nn::Integer: number of colors\n\nReturns:\n\nnew_cmap: truncated colormap\n\n\n\n\n\n","category":"function"},{"location":"api/#Visualizations","page":"API Reference","title":"Visualizations","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [smearFEM]\nPages = [\"plotting.jl\"]","category":"page"},{"location":"api/#smearFEM.PlotGrid-Tuple{Any, Any}","page":"API Reference","title":"smearFEM.PlotGrid","text":"PlotGrid(IEN, NodeList)\n\nFunction to plot the grid\n\nArguments:\n\nIEN::Matrix{Float64}{nElem, nNodes}: IEN array.\nNodeList::Matrix{Float64}{nNodes, ndim}: array of nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.animate2D-Tuple{}","page":"API Reference","title":"smearFEM.animate2D","text":"animate2D(;BorderNodes2D=nothing, fields2D=nothing, p=nothing, q=nothing)\n\nFunction to animate the 2D fields as a gif\n\nArguments:\n\nBorderNodes2D::Vector{Vector{Float64}}: 2D coordinates of the border nodes of the mesh\nfields2D::Vector{Vector{Float64}}: 2D projection of the solution vector\np::Vector{Float64}: x coordinates of the extracted convex hull\nq::Vector{Float64}: y coordinates of the extracted convex hull\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.animate3D-Tuple{Any}","page":"API Reference","title":"smearFEM.animate3D","text":"animate3D(fields)\n\nFunction to animate the 3D fields as a gif\n\nArguments:\n\nfields::Vector{Vector{Float64}}: solution vector\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.animate_fields-Tuple{}","page":"API Reference","title":"smearFEM.animate_fields","text":"animate_fields(;filepath=nothing, fields=nothing , IEN=nothing, BorderNodes2D=nothing, fields2D=nothing, p=nothing, q=nothing)\n\nFunction to animate the fields as a gif\n\nArguments:\n\nfields::Vector{Vector{Float64}}: solution vector\nfields2D::Vector{Vector{Float64}}: 2D projection of the solution vector\nBorderNodes2D::Vector{Vector{Float64}}: 2D coordinates of the border nodes of the mesh\nIEN::Matrix{Float64}{nElem, nNodes}: IEN array\np::Vector{Float64}: x coordinates of the extracted convex hull\nq::Vector{Float64}: y coordinates of the extracted convex hull\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.plot_mesh-Tuple{Any, Any}","page":"API Reference","title":"smearFEM.plot_mesh","text":"plot_meshgrid(NodeList, IEN)\n\nFunction to plot the mesh\n\nArguments:\n\nNodeList::Matrix{Float64}{nNodes,ndim}: array of nodes.\nIEN::Matrix{nElem,nNodes}: IEN array.\n\n\n\n\n\n","category":"method"},{"location":"api/#io","page":"API Reference","title":"io","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [smearFEM]\nPages = [\"io.jl\"]","category":"page"},{"location":"api/#smearFEM.writeCSV-Tuple{Any, Any}","page":"API Reference","title":"smearFEM.writeCSV","text":"writeCSV(fileName, borders)\n\nFunction to write the border data to a CSV file.\n\nArguments:\n\nfileName::String: name of the file.\nborders::Vector{Matrix{Float64}}: vector of border data.\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.write_scene-NTuple{6, Any}","page":"API Reference","title":"smearFEM.write_scene","text":"write_scene(fileName, NodeList, IEN, ne, ndim, fields)\n\nFunction to write the solution to a VTK file\n\nArguments:\n\nfileName::String: name of the VTK file.\nNodeList::Matrix{Float64}{nNodes, ndim}: array of nodes.\nIEN::Matrix{nElem, nNodes}: IEN array\nne::Integer: number of elements in each direction.\nndim::Integer: number of dimensions\nfields::Vector{Vector{Float64}}: vector of solution fields.\n\n\n\n\n\n","category":"method"},{"location":"api/#smearFEM.write_vtk-NTuple{7, Any}","page":"API Reference","title":"smearFEM.write_vtk","text":"write_vtk(fileName, fieldName, NodeList, IEN, ne, ndim, q)\n\nFunction to write the solution to a VTK file\n\nArguments:\n\nfileName::String: name of the VTK file.\nNodeList::Matrix[nNodes, ndim]: array of nodes.\nIEN::Matrix{Float64}{nElem, nNodes}: IEN array.\nne::Integer: number of elements in each direction.\nndim::Integer: number of dimensions.\nq::Vector{Float64}: vector of solution fields.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Modules = [smearFEM]\nPages = [\"squeeze_linear_elasticity.jl\",\"squeeze_stokes.jl\"]","category":"page"},{"location":"examples/#smearFEM.apply_boundary_conditions-Tuple{Any}","page":"Examples","title":"smearFEM.apply_boundary_conditions","text":"Apply the Neumann slip boundary conditions to the global stiffness matrix\n\nArguments:\n\nK: {[ndof,ndof] SparseMatrixCSC{Float64,Int64}} : sparse stiffness matrix  ID: {[nNodes,nDof] Matrix{Int}} : matrix that maps the global degrees of freedom to the local degrees of freedom qd: {[ndof] Vector{Float64}} : Dirichlet boundary conditions qn: {[ndof] Vector{Float64}} : Neumann boundary conditions\n\nReturns:\n\nK: {[ndof,ndof] SparseMatrixCSC{Float64,Int64}} : sparse stiffness matrix with the boundary conditions applied F: {[ndof] Vector{Float64}} : force vector\n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.assemble_system-Tuple{smearFEM.model}","page":"Examples","title":"smearFEM.assemble_system","text":"assemble_system(ne, NodeList, IEN, ndim, FunctionClass=\"Q1\", nDof=1, ID=nothing, Young=1, ν=0.3)\n\nAssembles the finite element system. # Returns the global stiffness matrix\n\nArguments:\n\nne::Interger: number of elements in each direction\nNodeList::Matrix{Float64}{ndim,nNodes} : coordinates of the nodes\nIEN::Matrix{Int}{nElements,nLocalNodes} : connectivity matrix\nndim::Interger: number of dimensions\nnDof::Interger: number of degree of freedom per node\nFunctionClass::String: type of basis functions to be considered (Q1:quadratic or Q2:Lagrange)\nID::Matrix{Int}{nNodes,nDof} : matrix that maps the global degrees of freedom to the local degrees of freedom\nYoung::Float64: Young's modulus\nν::Float64: Poisson's ratio\n\nReturns:\n\nK::SparseMatrixCSC{Float64,Int64}{ndof,ndof} : sparse stiffness matrix \n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.get_cMat","page":"Examples","title":"smearFEM.get_cMat","text":"get_cMat(type; λ=nothing, μ=nothing, Young=nothing, ν=nothing)\n\nReturns the stiffness matrix for a given type of material\n\nArguments:\n\ntype::String: type of constitutive matrix to be considered (lame or standard)\nλ::Float64: Lame's first parameter\nμ::Float64: Sheer modulus\nYoung::Float64: Young's modulus\nν::Float64: Poisson's ratio\n\nReturns:\n\ncMat::Matrix{Float64}: constitutive matrix\n\n\n\n\n\n","category":"function"},{"location":"examples/#smearFEM.initialize_mesh_test","page":"Examples","title":"smearFEM.initialize_mesh_test","text":"function initialize_mesh_test(x0, x1, y0, y1, z0, z1, ne, ndim, FunctionClass, CameraMatrix, filepath=nothing)\n\nInitialize the mesh and write the data to a file\n\nArguments:\n\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\ny0::Float64 : y-coordinate of the lower left corner of the domain\ny1::Float64 : y-coordinate of the upper right corner of the domain\nz0::Float64 : z-coordinate of the lower left corner of the domain\nz1::Float64 : z-coordinate of the upper right corner of the domain\nne::Int : number of elements\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\nCameraMatrix::Matrix{Float64} : camera matrix\nfilepath::String : path to the file\n\n\n\n\n\n","category":"function"},{"location":"examples/#smearFEM.set_file-Tuple{Any}","page":"Examples","title":"smearFEM.set_file","text":"set_file(filepath)\n\nCreate the directories to store the data\n\nArguments:\n\nfilepath::String : path to the file\n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.setboundaryCond","page":"Examples","title":"smearFEM.setboundaryCond","text":"Set the Dirichlet boundary conditions for the problem\n\nArguments:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\nne::Int : number of elements\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\n\nReturns:\n\nq_upper::Vector{Float64} : vector of the Dirichlet boundary conditions (for ndof = 1) / Dirichlet boundary conditions upper surface (for ndof > 1)\nq_lower::Vector{Float64} : vector of the Neumann boundary conditions (for ndof = 1) / Dirichlet boundary conditions lower surface (for ndof > 1)\nC_uc::SparseMatrixCSC{Float64,Int64} : onstraint matrix\n\n\n\n\n\n","category":"function"},{"location":"examples/#smearFEM.simulate-NTuple{19, Any}","page":"Examples","title":"smearFEM.simulate","text":"simulate(x0, x1, y0, y1, z0, z1, ne, Young, ν, ndim, FunctionClass, nDof, β, CameraMatrix, endTime, tSteps, Control, cParam, cMat; writeData=false, filepath=nothing)\n\nSimulate the deformation of a cylindrical under compression\n\nArguments:\n\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\ny0::Float64 : y-coordinate of the lower left corner of the domain\ny1::Float64 : y-coordinate of the upper right corner of the domain\nz0::Float64 : z-coordinate of the lower left corner of the domain\nz1::Float64 : z-coordinate of the upper right corner of the domain\nne::Int : number of elements\nYoung::Float64 : Young's modulus\nν::Float64 : Poisson's ratio\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\nnDof::Int : number of degree of freedom per node\nβ::Float64 : friction parameter\nCameraMatrix::Matrix{Float64} : camera matrix\nendTime::Float64 : end time\ntSteps::Int : number of time steps to be taken\nControl::String : type of control (force or displacement)\ncParam::Vector{Float64} : control parameter (force or displacement prescribed at the top surface per time step)\ncMat::Matrix{Float64} : control matrix\nwriteData::Bool : write the data to a file\nfilepath::String : path to the file\n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.test-NTuple{17, Any}","page":"Examples","title":"smearFEM.test","text":"test(x0, x1, y0, y1, z0, z1, ne, Young, ν, ndim, FunctionClass, nDof, β, CameraMatrix, endTime, tSteps, Control; writeData=false, filepath=nothing, mode = \"standard\")\n\nTest the simulation\n\nArguments:\n\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\ny0::Float64 : y-coordinate of the lower left corner of the domain\ny1::Float64 : y-coordinate of the upper right corner of the domain\nz0::Float64 : z-coordinate of the lower left corner of the domain\nz1::Float64 : z-coordinate of the upper right corner of the domain\nne::Int : number of elements\nYoung::Float64 : Young's modulus\nν::Float64 : Poisson's ratio\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\nnDof::Int : number of degree of freedom per node\nβ::Float64 : friction parameter\nCameraMatrix::Matrix{Float64} : camera matrix\nendTime::Float64 : end time\ntSteps::Int : number of time steps to be taken\nControl::String : type of control (force or displacement)\nwriteData::Bool : write the data to a file\nfilepath::String : path to the file\nmode::String : type of constitutive matrix\n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.write_sim_data-NTuple{18, Any}","page":"Examples","title":"smearFEM.write_sim_data","text":"write_sim_data(x0, x1, y0, y1, z0, z1, ne, Young, ν, ndim, FunctionClass, nDof, β, CameraMatrix, endTime, tSteps, Control, filename; mode = \"standard\")\n\nInitialize the simulation and write the data to a file\n\nArguments:\n\nx0::Float64 : x-coordinate of the lower left corner of the domain\nx1::Float64 : x-coordinate of the upper right corner of the domain\ny0::Float64 : y-coordinate of the lower left corner of the domain\ny1::Float64 : y-coordinate of the upper right corner of the domain\nz0::Float64 : z-coordinate of the lower left corner of the domain\nz1::Float64 : z-coordinate of the upper right corner of the domain\nne::Int : number of elements\nYoung::Float64 : Young's modulus\nν::Float64 : Poisson's ratio\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\nnDof::Int : number of degree of freedom per node\nβ::Float64 : friction parameter\nCameraMatrix::Matrix{Float64} : camera matrix\nendTime::Float64 : end time\ntSteps::Int : number of time steps to be taken\nControl::String : type of control (force or displacement)\nfilename::String : path to the file\n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.apply_boundary_conditions_stokes-Tuple{Any}","page":"Examples","title":"smearFEM.apply_boundary_conditions_stokes","text":"Apply the Neumann slip boundary conditions to the global stiffness matrix\n\nArguments:\n\nK: {[ndof,ndof] SparseMatrixCSC{Float64,Int64}} : sparse stiffness matrix  ID: {[nNodes,nDof] Matrix{Int}} : matrix that maps the global degrees of freedom to the local degrees of freedom qd: {[ndof] Vector{Float64}} : Dirichlet boundary conditions qn: {[ndof] Vector{Float64}} : Neumann boundary conditions\n\nReturns:\n\nK: {[ndof,ndof] SparseMatrixCSC{Float64,Int64}} : sparse stiffness matrix with the boundary conditions applied F: {[ndof] Vector{Float64}} : force vector\n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.assemble_system_A-Tuple{smearFEM.model}","page":"Examples","title":"smearFEM.assemble_system_A","text":"assemble_system(ne, NodeList, IEN, ndim, FunctionClass=\"Q1\", nDof=1, ID=nothing, Young=1, ν=0.3)\n\nAssembles the finite element system. # Returns the global stiffness matrix\n\nArguments:\n\nne::Interger: number of elements in each direction\nNodeList::Matrix{Float64}{ndim,nNodes} : coordinates of the nodes\nIEN::Matrix{Int}{nElements,nLocalNodes} : connectivity matrix\nndim::Interger: number of dimensions\nnDof::Interger: number of degree of freedom per node\nFunctionClass::String: type of basis functions to be considered (Q1:quadratic or Q2:Lagrange)\nID::Matrix{Int}{nNodes,nDof} : matrix that maps the global degrees of freedom to the local degrees of freedom\nYoung::Float64: Young's modulus\nν::Float64: Poisson's ratio\n\nReturns:\n\nK::SparseMatrixCSC{Float64,Int64}{ndof,ndof} : sparse stiffness matrix \n\n\n\n\n\n","category":"method"},{"location":"examples/#smearFEM.set_boundary_cond_stokes","page":"Examples","title":"smearFEM.set_boundary_cond_stokes","text":"Set the Dirichlet boundary conditions for the problem\n\nArguments:\n\nNodeList::Matrix{Float64}{nNodes,ndim} : array of nodes\nne::Int : number of elements\nndim::Int : number of dimensions\nFunctionClass::String : type of basis function\n\nReturns:\n\nq_upper::Vector{Float64} : vector of the Dirichlet boundary conditions (for ndof = 1) / Dirichlet boundary conditions upper surface (for ndof > 1)\nq_lower::Vector{Float64} : vector of the Neumann boundary conditions (for ndof = 1) / Dirichlet boundary conditions lower surface (for ndof > 1)\nC_uc::SparseMatrixCSC{Float64,Int64} : onstraint matrix\n\n\n\n\n\n","category":"function"},{"location":"#smearFEM","page":"Home","title":"smearFEM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for smearFEM.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg \"add smearFEM\"","category":"page"},{"location":"#Testing","page":"Home","title":"Testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg \"test smearFEM\"","category":"page"}]
}
